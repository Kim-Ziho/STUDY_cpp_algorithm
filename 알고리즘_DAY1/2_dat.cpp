#include <iostream>
using namespace std;


int main() {

    // cin의 속도를 높이기 위한 코드(항상 main의 맨 앞에 위치)
    ios_base::sync_with_stdio(false);
    cin.tie();
    cout.tie();

    // 디버깅 
    
    // 배열 <- 
    
    // 문제 1
    // 10개의 data가 공백을 기준으로 주어짐
    // 각 data는 0 or 1만 존재
    // ex. 0 1 0 0 0 1 1 1 0 1
    // 그럴 때, 0이 몇 개 있는지, 1이 몇 개 있는지
    // 0 : ?개
    // 1 : ?개

    // 입력한 숫자 => 입력한 숫자의 개수
    // 배열을 응용 upgrade

    // 0번 회원 은 0의 개수에다가 counting
    // 1번 회원 은 1의 개수에다가 counting

    //int cntZero = 0; // 0의 개수
    //int cntOne = 0; // 1의 개수
    //int arr[2] = { 0 }; // arr[0], arr[1]의 2개값을 저장하는 배열
    //for (int i = 0; i < 10; i++)
    //{
    //    int temp;
    //    cin >> temp;
    //    arr[temp]++;
    //    //if (temp == 0)
    //    //    cntZero++;
    //    //else if (temp == 1)
    //    //    cntOne++;
    //}
    //cout << "0 : " << arr[0] << "개\n";
    //cout << "1 : " << arr[1] << "개\n";

    // 문제 2
    // 10개의 숫자가 공백을 구분으로 주어집니다.
    // 단, 각 숫자는 모두 한자리 숫자
    // 어떤 숫자가 몇 개씩 있었는지 0 ~ 9의 숫자 순서대로 출력
    // ex.
    // 0 0 0 1 2 3 4 5 6 7
    // 0 : 3개
    // 1 : 1개
    // 2 : 1개
    // 3 : 1개
    // .....
    // 9 : 0개

    // temp라는 수가 입력됐을때, temp가 몇개(arr[temp])인지 counting
    //int arr[10] = {0,}; // 10개짜리 (0~9번 index) 배열 선언

    //for (int i = 0; i < 10; i++) // 10번 반복하여
    //{
    //    int temp;
    //    cin >> temp; // 숫자 입력
    //    arr[temp]++; // temp가 하나 추가됐다라고 arr[temp]에(temp번째에) counting
    //}

    //for (int i = 0; i < 10; i++)
    //{
    //    cout << i << " : " << arr[i] << "\n";
    //    //                i라는 값이 몇개 있는가?
    //}
    //// 만약 정확하게 7이 몇개 나왔는지 궁금하다.
    //cout << arr[7] << "\n";

    // 문제 3

    // 10개의 한 자리 수가 입력
    // 단, 중복된 수는 없음
    // 어떤 수가 몇 번째 위치에 나왔는지 출력
    // ex) 5 1 3 2 4 9 6 7 8 0
    // 0 : 9번째
    // 1 : 1번째
    // 2 : 3번째
    // 3 : 2번째
    // 4 : 4번째
    // 5 : 0번째
    // ....
    // 9 : 5번째

    // temp : temp가 몇번째에 나왔었는가?
    // index : temp(입력된 수)
    // value : temp(입력된 수)가 몇 번째에서 나왔는가?

    /*int dat[10] = { 0, };
    for (int i = 0; i < 10; i++)
    {
        int temp;
        cin >> temp;
        dat[temp] = i;
    }

    for (int i = 0; i < 10; i++)
    {
        cout << i << ":" << dat[i] << "\n";
    }*/

    //int MAP[10][10] = {
    //    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    //    {0, 2, 0, 0, 0, 0, 0, 0, 5, 0},
    //    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    //    {0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
    //    {0, 0, 0, 0, 0, 0, 0, 100, 0, 0},
    //    {0, 0, 0, 0, 0, 10, 0, 0, 0, 0},
    //    {0, 1, 0, 0, 0, 0, 0, 0, 1, 0},
    //    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    //    {1, 0, 0, 20, 0, 0, 0, 1, 0, 0},
    //    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    //};
    //// MAP[row][col] = 해당 (row, col)위치에 몇 개의 지뢰가 있는가?
    ////     row : 줄(행)에 해당하는 index
    ////     col : 칸(열)에 해당하는 index
    ////   value : 해당 (row, col)위치에 몇 개의 지뢰가 있는가?

    //// row, col이 입력
    //// 해당 위치에 지뢰가 있으면 지뢰 개수만큼 BOOM! 출력
    ////                    없으면 STILL ALIVE! 출력

    //int row, col;
    //cin >> row >> col;
    //// 지뢰가 있는지 확인할 좌표 입력

    //if (MAP[row][col] != 0) // MAP[row][col]에 봤더니 0개가 아니더라(지뢰가 있더라)
    //{
    //    // MAP[row][col] : row, col에 매설된 지뢰 개수
    //    for(int i = 0; i < MAP[row][col]; i++)
    //        cout << "BOOM!";
    //}
    //else
    //{
    //    cout << "STILL ALIVE!";
    //}

    //알고리즘 공부시 !
    //답코드가 있다고 실행만 하고 넘어가기 X
    //꼭!!!!! 꼬오오오옥!!!!!!
    //직접 풀어보기!!!!!
    //코드를 이해하시고 그 이해를 바탕으로 본인 스타일의 코드를 작성 <-

    //저나 다른 사람들 코드의 경우
    //각각 기본적으로 당연히 되겠거니 하고 넘어가는 부분이 있어요
    //<- 코드에는 작성이 X해당 사람의 스타일에선 문제가 없거든요.
    //본인스타일대로 작성시 해당 부분이 좀 달라지면서 문제가 생길 수 있음

    //추후에도 꼭 나오기 마련인 문제들 <- 실수
    //나중에 해당 부분을 고치기가 점점 어려워 질 수 있음
    //이미 전에 해당 실수를 많이 겪어봤음




    return 0;
}